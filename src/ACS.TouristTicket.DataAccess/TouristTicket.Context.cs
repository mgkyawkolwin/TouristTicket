//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

using ACS.TouristTicket.Model;
namespace ACS.TouristTicket.DataAccess
{
    public partial class TouristTicketContainer : ObjectContext
    {
        public const string ConnectionString = "name=TouristTicketContainer";
        public const string ContainerName = "TouristTicketContainer";
    
        #region Constructors
    
        public TouristTicketContainer()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public TouristTicketContainer(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public TouristTicketContainer(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<SampleObject> SampleObjects
        {
            get { return _sampleObjects  ?? (_sampleObjects = CreateObjectSet<SampleObject>("SampleObjects")); }
        }
        private ObjectSet<SampleObject> _sampleObjects;
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
        public ObjectSet<Role> Roles
        {
            get { return _roles  ?? (_roles = CreateObjectSet<Role>("Roles")); }
        }
        private ObjectSet<Role> _roles;
    
        public ObjectSet<UserInRole> UserInRoles
        {
            get { return _userInRoles  ?? (_userInRoles = CreateObjectSet<UserInRole>("UserInRoles")); }
        }
        private ObjectSet<UserInRole> _userInRoles;
    
        public ObjectSet<ExceptionLog> ExceptionLogs
        {
            get { return _exceptionLogs  ?? (_exceptionLogs = CreateObjectSet<ExceptionLog>("ExceptionLogs")); }
        }
        private ObjectSet<ExceptionLog> _exceptionLogs;
    
        public ObjectSet<TransactionLog> TransactionLogs
        {
            get { return _transactionLogs  ?? (_transactionLogs = CreateObjectSet<TransactionLog>("TransactionLogs")); }
        }
        private ObjectSet<TransactionLog> _transactionLogs;
    
        public ObjectSet<TicketInZone> TicketInZones
        {
            get { return _ticketInZones  ?? (_ticketInZones = CreateObjectSet<TicketInZone>("TicketInZones")); }
        }
        private ObjectSet<TicketInZone> _ticketInZones;
    
        public ObjectSet<TicketUsage> TicketUsages
        {
            get { return _ticketUsages  ?? (_ticketUsages = CreateObjectSet<TicketUsage>("TicketUsages")); }
        }
        private ObjectSet<TicketUsage> _ticketUsages;
    
        public ObjectSet<Zone> Zones
        {
            get { return _zones  ?? (_zones = CreateObjectSet<Zone>("Zones")); }
        }
        private ObjectSet<Zone> _zones;
    
        public ObjectSet<ZoneGroup> ZoneGroups
        {
            get { return _zoneGroups  ?? (_zoneGroups = CreateObjectSet<ZoneGroup>("ZoneGroups")); }
        }
        private ObjectSet<ZoneGroup> _zoneGroups;
    
        public ObjectSet<ZoneAndZoneGroup> ZoneAndZoneGroups
        {
            get { return _zoneAndZoneGroups  ?? (_zoneAndZoneGroups = CreateObjectSet<ZoneAndZoneGroup>("ZoneAndZoneGroups")); }
        }
        private ObjectSet<ZoneAndZoneGroup> _zoneAndZoneGroups;
    
        public ObjectSet<Counter> Counters
        {
            get { return _counters  ?? (_counters = CreateObjectSet<Counter>("Counters")); }
        }
        private ObjectSet<Counter> _counters;
    
        public ObjectSet<Ticket> Tickets
        {
            get { return _tickets  ?? (_tickets = CreateObjectSet<Ticket>("Tickets")); }
        }
        private ObjectSet<Ticket> _tickets;
    
        public ObjectSet<TicketSetting> TicketSettings
        {
            get { return _ticketSettings  ?? (_ticketSettings = CreateObjectSet<TicketSetting>("TicketSettings")); }
        }
        private ObjectSet<TicketSetting> _ticketSettings;
    
        public ObjectSet<TicketDetail> TicketDetails
        {
            get { return _ticketDetails  ?? (_ticketDetails = CreateObjectSet<TicketDetail>("TicketDetails")); }
        }
        private ObjectSet<TicketDetail> _ticketDetails;
    
        public ObjectSet<TicketUnused> TicketUnuseds
        {
            get { return _ticketUnuseds  ?? (_ticketUnuseds = CreateObjectSet<TicketUnused>("TicketUnuseds")); }
        }
        private ObjectSet<TicketUnused> _ticketUnuseds;
    
        public ObjectSet<TicketActivationLog> TicketActivationLogs
        {
            get { return _ticketActivationLogs  ?? (_ticketActivationLogs = CreateObjectSet<TicketActivationLog>("TicketActivationLogs")); }
        }
        private ObjectSet<TicketActivationLog> _ticketActivationLogs;
    
        public ObjectSet<TicketUsageLog> TicketUsageLogs
        {
            get { return _ticketUsageLogs  ?? (_ticketUsageLogs = CreateObjectSet<TicketUsageLog>("TicketUsageLogs")); }
        }
        private ObjectSet<TicketUsageLog> _ticketUsageLogs;
    
        public ObjectSet<CounterAndZone> CounterAndZones
        {
            get { return _counterAndZones  ?? (_counterAndZones = CreateObjectSet<CounterAndZone>("CounterAndZones")); }
        }
        private ObjectSet<CounterAndZone> _counterAndZones;
    
        public ObjectSet<UserAccessLog> UserAccessLogs
        {
            get { return _userAccessLogs  ?? (_userAccessLogs = CreateObjectSet<UserAccessLog>("UserAccessLogs")); }
        }
        private ObjectSet<UserAccessLog> _userAccessLogs;
    
        public ObjectSet<DistinctZoneGroupName> DistinctZoneGroupNames
        {
            get { return _distinctZoneGroupNames  ?? (_distinctZoneGroupNames = CreateObjectSet<DistinctZoneGroupName>("DistinctZoneGroupNames")); }
        }
        private ObjectSet<DistinctZoneGroupName> _distinctZoneGroupNames;
    
        public ObjectSet<PrintingApproved> PrintingApproveds
        {
            get { return _printingApproveds  ?? (_printingApproveds = CreateObjectSet<PrintingApproved>("PrintingApproveds")); }
        }
        private ObjectSet<PrintingApproved> _printingApproveds;

        #endregion
        #region Function Imports
        public ObjectResult<Nullable<int>> InsertSample(ObjectParameter pKID, string sampleData, ObjectParameter errorCode)
        {
    
            ObjectParameter sampleDataParameter;
    
            if (sampleData != null)
            {
                sampleDataParameter = new ObjectParameter("SampleData", sampleData);
            }
            else
            {
                sampleDataParameter = new ObjectParameter("SampleData", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertSample", pKID, sampleDataParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> UpdateSample(Nullable<int> pKID, string sampleData, ObjectParameter errorCode)
        {
    
            ObjectParameter pKIDParameter;
    
            if (pKID.HasValue)
            {
                pKIDParameter = new ObjectParameter("PKID", pKID);
            }
            else
            {
                pKIDParameter = new ObjectParameter("PKID", typeof(int));
            }
    
            ObjectParameter sampleDataParameter;
    
            if (sampleData != null)
            {
                sampleDataParameter = new ObjectParameter("SampleData", sampleData);
            }
            else
            {
                sampleDataParameter = new ObjectParameter("SampleData", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateSample", pKIDParameter, sampleDataParameter, errorCode);
        }
        public ObjectResult<SampleObject> SelectSample()
        {
            return base.ExecuteFunction<SampleObject>("SelectSample");
        }
        public ObjectResult<User> SelectUser()
        {
            return base.ExecuteFunction<User>("SelectUser");
        }
        public ObjectResult<User> UserLogIn(string userID, string password)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
            return base.ExecuteFunction<User>("UserLogIn", userIDParameter, passwordParameter);
        }
        public ObjectResult<Role> SelectRole()
        {
            return base.ExecuteFunction<Role>("SelectRole");
        }
        public ObjectResult<Nullable<int>> InsertUserAccessLog(ObjectParameter pKID, string userID, Nullable<System.DateTime> accessDate, string action, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter accessDateParameter;
    
            if (accessDate.HasValue)
            {
                accessDateParameter = new ObjectParameter("AccessDate", accessDate);
            }
            else
            {
                accessDateParameter = new ObjectParameter("AccessDate", typeof(System.DateTime));
            }
    
            ObjectParameter actionParameter;
    
            if (action != null)
            {
                actionParameter = new ObjectParameter("Action", action);
            }
            else
            {
                actionParameter = new ObjectParameter("Action", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertUserAccessLog", pKID, userIDParameter, accessDateParameter, actionParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode, errorMsg);
        }
        public ObjectResult<UserAccessLog> SelectUserAccessLog()
        {
            return base.ExecuteFunction<UserAccessLog>("SelectUserAccessLog");
        }
        public ObjectResult<UserAccessLog> SelectUserAccessLogByUserID(string userID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
            return base.ExecuteFunction<UserAccessLog>("SelectUserAccessLogByUserID", userIDParameter);
        }
        public ObjectResult<Nullable<int>> InsertUserInRole(ObjectParameter pKID, string userID, string roleName, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter roleNameParameter;
    
            if (roleName != null)
            {
                roleNameParameter = new ObjectParameter("RoleName", roleName);
            }
            else
            {
                roleNameParameter = new ObjectParameter("RoleName", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertUserInRole", pKID, userIDParameter, roleNameParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> UpdateUser(string userID, string password, string displayName, string position, string status, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
    
            ObjectParameter displayNameParameter;
    
            if (displayName != null)
            {
                displayNameParameter = new ObjectParameter("DisplayName", displayName);
            }
            else
            {
                displayNameParameter = new ObjectParameter("DisplayName", typeof(string));
            }
    
            ObjectParameter positionParameter;
    
            if (position != null)
            {
                positionParameter = new ObjectParameter("Position", position);
            }
            else
            {
                positionParameter = new ObjectParameter("Position", typeof(string));
            }
    
            ObjectParameter statusParameter;
    
            if (status != null)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(string));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateUser", userIDParameter, passwordParameter, displayNameParameter, positionParameter, statusParameter, modifiedDateParameter, modifiedByParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> UpdateUserInRole(ObjectParameter pKID, string userID, string roleName, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter roleNameParameter;
    
            if (roleName != null)
            {
                roleNameParameter = new ObjectParameter("RoleName", roleName);
            }
            else
            {
                roleNameParameter = new ObjectParameter("RoleName", typeof(string));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateUserInRole", pKID, userIDParameter, roleNameParameter, modifiedDateParameter, modifiedByParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertNewUser(ObjectParameter pKID, string userID, string password, string displayName, string position, string status, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
    
            ObjectParameter displayNameParameter;
    
            if (displayName != null)
            {
                displayNameParameter = new ObjectParameter("DisplayName", displayName);
            }
            else
            {
                displayNameParameter = new ObjectParameter("DisplayName", typeof(string));
            }
    
            ObjectParameter positionParameter;
    
            if (position != null)
            {
                positionParameter = new ObjectParameter("Position", position);
            }
            else
            {
                positionParameter = new ObjectParameter("Position", typeof(string));
            }
    
            ObjectParameter statusParameter;
    
            if (status != null)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertNewUser", pKID, userIDParameter, passwordParameter, displayNameParameter, positionParameter, statusParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertExceptionLog(ObjectParameter pKID, string errorMessage, string stackTrace, Nullable<System.DateTime> createdDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter errorMessageParameter;
    
            if (errorMessage != null)
            {
                errorMessageParameter = new ObjectParameter("ErrorMessage", errorMessage);
            }
            else
            {
                errorMessageParameter = new ObjectParameter("ErrorMessage", typeof(string));
            }
    
            ObjectParameter stackTraceParameter;
    
            if (stackTrace != null)
            {
                stackTraceParameter = new ObjectParameter("StackTrace", stackTrace);
            }
            else
            {
                stackTraceParameter = new ObjectParameter("StackTrace", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertExceptionLog", pKID, errorMessageParameter, stackTraceParameter, createdDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertTransactionLog(ObjectParameter pKID, string transactionType, Nullable<System.DateTime> transactionDate, string data, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter transactionTypeParameter;
    
            if (transactionType != null)
            {
                transactionTypeParameter = new ObjectParameter("TransactionType", transactionType);
            }
            else
            {
                transactionTypeParameter = new ObjectParameter("TransactionType", typeof(string));
            }
    
            ObjectParameter transactionDateParameter;
    
            if (transactionDate.HasValue)
            {
                transactionDateParameter = new ObjectParameter("TransactionDate", transactionDate);
            }
            else
            {
                transactionDateParameter = new ObjectParameter("TransactionDate", typeof(System.DateTime));
            }
    
            ObjectParameter dataParameter;
    
            if (data != null)
            {
                dataParameter = new ObjectParameter("Data", data);
            }
            else
            {
                dataParameter = new ObjectParameter("Data", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTransactionLog", pKID, transactionTypeParameter, transactionDateParameter, dataParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertNewTicket(Nullable<int> pKID, string zoneGroupID, Nullable<decimal> price, string ticketStatus, Nullable<int> allowedUsage, Nullable<int> alreadyUsed, Nullable<int> allowedDays, Nullable<System.DateTime> expiryDate, string ticketData, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter pKIDParameter;
    
            if (pKID.HasValue)
            {
                pKIDParameter = new ObjectParameter("PKID", pKID);
            }
            else
            {
                pKIDParameter = new ObjectParameter("PKID", typeof(int));
            }
    
            ObjectParameter zoneGroupIDParameter;
    
            if (zoneGroupID != null)
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", zoneGroupID);
            }
            else
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", typeof(string));
            }
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("Price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("Price", typeof(decimal));
            }
    
            ObjectParameter ticketStatusParameter;
    
            if (ticketStatus != null)
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", ticketStatus);
            }
            else
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", typeof(string));
            }
    
            ObjectParameter allowedUsageParameter;
    
            if (allowedUsage.HasValue)
            {
                allowedUsageParameter = new ObjectParameter("AllowedUsage", allowedUsage);
            }
            else
            {
                allowedUsageParameter = new ObjectParameter("AllowedUsage", typeof(int));
            }
    
            ObjectParameter alreadyUsedParameter;
    
            if (alreadyUsed.HasValue)
            {
                alreadyUsedParameter = new ObjectParameter("AlreadyUsed", alreadyUsed);
            }
            else
            {
                alreadyUsedParameter = new ObjectParameter("AlreadyUsed", typeof(int));
            }
    
            ObjectParameter allowedDaysParameter;
    
            if (allowedDays.HasValue)
            {
                allowedDaysParameter = new ObjectParameter("AllowedDays", allowedDays);
            }
            else
            {
                allowedDaysParameter = new ObjectParameter("AllowedDays", typeof(int));
            }
    
            ObjectParameter expiryDateParameter;
    
            if (expiryDate.HasValue)
            {
                expiryDateParameter = new ObjectParameter("ExpiryDate", expiryDate);
            }
            else
            {
                expiryDateParameter = new ObjectParameter("ExpiryDate", typeof(System.DateTime));
            }
    
            ObjectParameter ticketDataParameter;
    
            if (ticketData != null)
            {
                ticketDataParameter = new ObjectParameter("TicketData", ticketData);
            }
            else
            {
                ticketDataParameter = new ObjectParameter("TicketData", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertNewTicket", pKIDParameter, zoneGroupIDParameter, priceParameter, ticketStatusParameter, allowedUsageParameter, alreadyUsedParameter, allowedDaysParameter, expiryDateParameter, ticketDataParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertTicketInZone(ObjectParameter pKID, string ticketID, string zoneGroupID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter ticketIDParameter;
    
            if (ticketID != null)
            {
                ticketIDParameter = new ObjectParameter("TicketID", ticketID);
            }
            else
            {
                ticketIDParameter = new ObjectParameter("TicketID", typeof(string));
            }
    
            ObjectParameter zoneGroupIDParameter;
    
            if (zoneGroupID != null)
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", zoneGroupID);
            }
            else
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", typeof(string));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTicketInZone", pKID, ticketIDParameter, zoneGroupIDParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertTicketUsage(ObjectParameter pKID, Nullable<int> ticketID, Nullable<int> zoneID, Nullable<System.DateTime> dateUsed, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter ticketIDParameter;
    
            if (ticketID.HasValue)
            {
                ticketIDParameter = new ObjectParameter("TicketID", ticketID);
            }
            else
            {
                ticketIDParameter = new ObjectParameter("TicketID", typeof(int));
            }
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID.HasValue)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(int));
            }
    
            ObjectParameter dateUsedParameter;
    
            if (dateUsed.HasValue)
            {
                dateUsedParameter = new ObjectParameter("DateUsed", dateUsed);
            }
            else
            {
                dateUsedParameter = new ObjectParameter("DateUsed", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTicketUsage", pKID, ticketIDParameter, zoneIDParameter, dateUsedParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertZone(ObjectParameter pKID, string zoneID, string zoneGroupID, string zoneName, string address, string phone, string incharge, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID != null)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(string));
            }
    
            ObjectParameter zoneGroupIDParameter;
    
            if (zoneGroupID != null)
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", zoneGroupID);
            }
            else
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", typeof(string));
            }
    
            ObjectParameter zoneNameParameter;
    
            if (zoneName != null)
            {
                zoneNameParameter = new ObjectParameter("ZoneName", zoneName);
            }
            else
            {
                zoneNameParameter = new ObjectParameter("ZoneName", typeof(string));
            }
    
            ObjectParameter addressParameter;
    
            if (address != null)
            {
                addressParameter = new ObjectParameter("Address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("Address", typeof(string));
            }
    
            ObjectParameter phoneParameter;
    
            if (phone != null)
            {
                phoneParameter = new ObjectParameter("Phone", phone);
            }
            else
            {
                phoneParameter = new ObjectParameter("Phone", typeof(string));
            }
    
            ObjectParameter inchargeParameter;
    
            if (incharge != null)
            {
                inchargeParameter = new ObjectParameter("Incharge", incharge);
            }
            else
            {
                inchargeParameter = new ObjectParameter("Incharge", typeof(string));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertZone", pKID, zoneIDParameter, zoneGroupIDParameter, zoneNameParameter, addressParameter, phoneParameter, inchargeParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<TicketInZone> SelectTicketInZone()
        {
            return base.ExecuteFunction<TicketInZone>("SelectTicketInZone");
        }
        public ObjectResult<TicketUsage> SelectTicketUsage()
        {
            return base.ExecuteFunction<TicketUsage>("SelectTicketUsage");
        }
        public ObjectResult<Nullable<int>> UpdateTicket(ObjectParameter pKID, Nullable<decimal> price, string ticketStatus, Nullable<int> allowedUsage, Nullable<int> alreadyUsed, Nullable<int> allowedDays, Nullable<System.DateTime> expiryDate, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("Price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("Price", typeof(decimal));
            }
    
            ObjectParameter ticketStatusParameter;
    
            if (ticketStatus != null)
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", ticketStatus);
            }
            else
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", typeof(string));
            }
    
            ObjectParameter allowedUsageParameter;
    
            if (allowedUsage.HasValue)
            {
                allowedUsageParameter = new ObjectParameter("AllowedUsage", allowedUsage);
            }
            else
            {
                allowedUsageParameter = new ObjectParameter("AllowedUsage", typeof(int));
            }
    
            ObjectParameter alreadyUsedParameter;
    
            if (alreadyUsed.HasValue)
            {
                alreadyUsedParameter = new ObjectParameter("AlreadyUsed", alreadyUsed);
            }
            else
            {
                alreadyUsedParameter = new ObjectParameter("AlreadyUsed", typeof(int));
            }
    
            ObjectParameter allowedDaysParameter;
    
            if (allowedDays.HasValue)
            {
                allowedDaysParameter = new ObjectParameter("AllowedDays", allowedDays);
            }
            else
            {
                allowedDaysParameter = new ObjectParameter("AllowedDays", typeof(int));
            }
    
            ObjectParameter expiryDateParameter;
    
            if (expiryDate.HasValue)
            {
                expiryDateParameter = new ObjectParameter("ExpiryDate", expiryDate);
            }
            else
            {
                expiryDateParameter = new ObjectParameter("ExpiryDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateTicket", pKID, priceParameter, ticketStatusParameter, allowedUsageParameter, alreadyUsedParameter, allowedDaysParameter, expiryDateParameter, modifiedDateParameter, modifiedByParameter, createdDateParameter, createdByParameter, errorCode, errorMsg);
        }
        public ObjectResult<Zone> SelectZone()
        {
            return base.ExecuteFunction<Zone>("SelectZone");
        }
        public ObjectResult<Nullable<int>> DeleteZone(string zoneID, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID != null)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteZone", zoneIDParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> UpdateZone(Nullable<int> pKID, Nullable<int> linkID, string zoneID, string zoneGroupID, string zoneName, string address, string phone, string incharge, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter pKIDParameter;
    
            if (pKID.HasValue)
            {
                pKIDParameter = new ObjectParameter("PKID", pKID);
            }
            else
            {
                pKIDParameter = new ObjectParameter("PKID", typeof(int));
            }
    
            ObjectParameter linkIDParameter;
    
            if (linkID.HasValue)
            {
                linkIDParameter = new ObjectParameter("LinkID", linkID);
            }
            else
            {
                linkIDParameter = new ObjectParameter("LinkID", typeof(int));
            }
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID != null)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(string));
            }
    
            ObjectParameter zoneGroupIDParameter;
    
            if (zoneGroupID != null)
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", zoneGroupID);
            }
            else
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", typeof(string));
            }
    
            ObjectParameter zoneNameParameter;
    
            if (zoneName != null)
            {
                zoneNameParameter = new ObjectParameter("ZoneName", zoneName);
            }
            else
            {
                zoneNameParameter = new ObjectParameter("ZoneName", typeof(string));
            }
    
            ObjectParameter addressParameter;
    
            if (address != null)
            {
                addressParameter = new ObjectParameter("Address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("Address", typeof(string));
            }
    
            ObjectParameter phoneParameter;
    
            if (phone != null)
            {
                phoneParameter = new ObjectParameter("Phone", phone);
            }
            else
            {
                phoneParameter = new ObjectParameter("Phone", typeof(string));
            }
    
            ObjectParameter inchargeParameter;
    
            if (incharge != null)
            {
                inchargeParameter = new ObjectParameter("Incharge", incharge);
            }
            else
            {
                inchargeParameter = new ObjectParameter("Incharge", typeof(string));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateZone", pKIDParameter, linkIDParameter, zoneIDParameter, zoneGroupIDParameter, zoneNameParameter, addressParameter, phoneParameter, inchargeParameter, modifiedByParameter, modifiedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> UpdateZoneGroup(Nullable<int> pKID, string zoneGroupID, string zoneGroupName, Nullable<int> daysAllowed, Nullable<int> entriesAllowed, Nullable<decimal> price, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter pKIDParameter;
    
            if (pKID.HasValue)
            {
                pKIDParameter = new ObjectParameter("PKID", pKID);
            }
            else
            {
                pKIDParameter = new ObjectParameter("PKID", typeof(int));
            }
    
            ObjectParameter zoneGroupIDParameter;
    
            if (zoneGroupID != null)
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", zoneGroupID);
            }
            else
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", typeof(string));
            }
    
            ObjectParameter zoneGroupNameParameter;
    
            if (zoneGroupName != null)
            {
                zoneGroupNameParameter = new ObjectParameter("ZoneGroupName", zoneGroupName);
            }
            else
            {
                zoneGroupNameParameter = new ObjectParameter("ZoneGroupName", typeof(string));
            }
    
            ObjectParameter daysAllowedParameter;
    
            if (daysAllowed.HasValue)
            {
                daysAllowedParameter = new ObjectParameter("DaysAllowed", daysAllowed);
            }
            else
            {
                daysAllowedParameter = new ObjectParameter("DaysAllowed", typeof(int));
            }
    
            ObjectParameter entriesAllowedParameter;
    
            if (entriesAllowed.HasValue)
            {
                entriesAllowedParameter = new ObjectParameter("EntriesAllowed", entriesAllowed);
            }
            else
            {
                entriesAllowedParameter = new ObjectParameter("EntriesAllowed", typeof(int));
            }
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("Price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("Price", typeof(decimal));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateZoneGroup", pKIDParameter, zoneGroupIDParameter, zoneGroupNameParameter, daysAllowedParameter, entriesAllowedParameter, priceParameter, modifiedByParameter, modifiedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> DeleteZoneGroup(string zoneGroupID, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter zoneGroupIDParameter;
    
            if (zoneGroupID != null)
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", zoneGroupID);
            }
            else
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteZoneGroup", zoneGroupIDParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertTicketSetting(ObjectParameter pKID, string ticketZoneID, Nullable<int> daysAllowed, Nullable<int> entryAllowed, Nullable<decimal> price, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode)
        {
    
            ObjectParameter ticketZoneIDParameter;
    
            if (ticketZoneID != null)
            {
                ticketZoneIDParameter = new ObjectParameter("TicketZoneID", ticketZoneID);
            }
            else
            {
                ticketZoneIDParameter = new ObjectParameter("TicketZoneID", typeof(string));
            }
    
            ObjectParameter daysAllowedParameter;
    
            if (daysAllowed.HasValue)
            {
                daysAllowedParameter = new ObjectParameter("DaysAllowed", daysAllowed);
            }
            else
            {
                daysAllowedParameter = new ObjectParameter("DaysAllowed", typeof(int));
            }
    
            ObjectParameter entryAllowedParameter;
    
            if (entryAllowed.HasValue)
            {
                entryAllowedParameter = new ObjectParameter("EntryAllowed", entryAllowed);
            }
            else
            {
                entryAllowedParameter = new ObjectParameter("EntryAllowed", typeof(int));
            }
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("Price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("Price", typeof(decimal));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTicketSetting", pKID, ticketZoneIDParameter, daysAllowedParameter, entryAllowedParameter, priceParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode);
        }
        public ObjectResult<TicketSetting> SelectTicketSetting()
        {
            return base.ExecuteFunction<TicketSetting>("SelectTicketSetting");
        }
        public ObjectResult<Nullable<int>> InsertZoneGroup(ObjectParameter pKID, string zoneGroupID, string zoneGroupName, Nullable<int> daysAllowed, Nullable<int> entriesAllowed, Nullable<decimal> price, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter zoneGroupIDParameter;
    
            if (zoneGroupID != null)
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", zoneGroupID);
            }
            else
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", typeof(string));
            }
    
            ObjectParameter zoneGroupNameParameter;
    
            if (zoneGroupName != null)
            {
                zoneGroupNameParameter = new ObjectParameter("ZoneGroupName", zoneGroupName);
            }
            else
            {
                zoneGroupNameParameter = new ObjectParameter("ZoneGroupName", typeof(string));
            }
    
            ObjectParameter daysAllowedParameter;
    
            if (daysAllowed.HasValue)
            {
                daysAllowedParameter = new ObjectParameter("DaysAllowed", daysAllowed);
            }
            else
            {
                daysAllowedParameter = new ObjectParameter("DaysAllowed", typeof(int));
            }
    
            ObjectParameter entriesAllowedParameter;
    
            if (entriesAllowed.HasValue)
            {
                entriesAllowedParameter = new ObjectParameter("EntriesAllowed", entriesAllowed);
            }
            else
            {
                entriesAllowedParameter = new ObjectParameter("EntriesAllowed", typeof(int));
            }
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("Price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("Price", typeof(decimal));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertZoneGroup", pKID, zoneGroupIDParameter, zoneGroupNameParameter, daysAllowedParameter, entriesAllowedParameter, priceParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<ZoneGroup> SelectZoneGroup()
        {
            return base.ExecuteFunction<ZoneGroup>("SelectZoneGroup");
        }
        public ObjectResult<ZoneAndZoneGroup> SelectZoneAndZoneGroup()
        {
            return base.ExecuteFunction<ZoneAndZoneGroup>("SelectZoneAndZoneGroup");
        }
        public ObjectResult<Ticket> SelectTicket()
        {
            return base.ExecuteFunction<Ticket>("SelectTicket");
        }
        public ObjectResult<Nullable<int>> DeleteTicketSettings(string ticketZoneID, ObjectParameter errorCode)
        {
    
            ObjectParameter ticketZoneIDParameter;
    
            if (ticketZoneID != null)
            {
                ticketZoneIDParameter = new ObjectParameter("TicketZoneID", ticketZoneID);
            }
            else
            {
                ticketZoneIDParameter = new ObjectParameter("TicketZoneID", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteTicketSettings", ticketZoneIDParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> UpdateTicketSetting(string ticketZoneID, Nullable<int> daysAllowed, Nullable<int> entryAllowed, Nullable<decimal> price, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode)
        {
    
            ObjectParameter ticketZoneIDParameter;
    
            if (ticketZoneID != null)
            {
                ticketZoneIDParameter = new ObjectParameter("TicketZoneID", ticketZoneID);
            }
            else
            {
                ticketZoneIDParameter = new ObjectParameter("TicketZoneID", typeof(string));
            }
    
            ObjectParameter daysAllowedParameter;
    
            if (daysAllowed.HasValue)
            {
                daysAllowedParameter = new ObjectParameter("DaysAllowed", daysAllowed);
            }
            else
            {
                daysAllowedParameter = new ObjectParameter("DaysAllowed", typeof(int));
            }
    
            ObjectParameter entryAllowedParameter;
    
            if (entryAllowed.HasValue)
            {
                entryAllowedParameter = new ObjectParameter("EntryAllowed", entryAllowed);
            }
            else
            {
                entryAllowedParameter = new ObjectParameter("EntryAllowed", typeof(int));
            }
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("Price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("Price", typeof(decimal));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateTicketSetting", ticketZoneIDParameter, daysAllowedParameter, entryAllowedParameter, priceParameter, modifiedDateParameter, modifiedByParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> DeleteUserByUserID(string userID, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteUserByUserID", userIDParameter, errorCode, errorMsg);
        }
        public ObjectResult<UserInRole> SelectUserInRole()
        {
            return base.ExecuteFunction<UserInRole>("SelectUserInRole");
        }
        public ObjectResult<Nullable<int>> DeleteUserInRole(string userID, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteUserInRole", userIDParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertZoneAndZoneGroup(ObjectParameter pKID, string zoneID, string zoneGroupID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID != null)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(string));
            }
    
            ObjectParameter zoneGroupIDParameter;
    
            if (zoneGroupID != null)
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", zoneGroupID);
            }
            else
            {
                zoneGroupIDParameter = new ObjectParameter("ZoneGroupID", typeof(string));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertZoneAndZoneGroup", pKID, zoneIDParameter, zoneGroupIDParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> UpdateTicketStatus(Nullable<int> pKID, string ticketStatus, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter pKIDParameter;
    
            if (pKID.HasValue)
            {
                pKIDParameter = new ObjectParameter("PKID", pKID);
            }
            else
            {
                pKIDParameter = new ObjectParameter("PKID", typeof(int));
            }
    
            ObjectParameter ticketStatusParameter;
    
            if (ticketStatus != null)
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", ticketStatus);
            }
            else
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", typeof(string));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateTicketStatus", pKIDParameter, ticketStatusParameter, modifiedByParameter, modifiedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<TicketDetail> SelectTicketDetails()
        {
            return base.ExecuteFunction<TicketDetail>("SelectTicketDetails");
        }
        public ObjectResult<Nullable<int>> SelectNewTicketID()
        {
            return base.ExecuteFunction<Nullable<int>>("SelectNewTicketID");
        }
        public ObjectResult<Nullable<int>> InsertTicketUnused(ObjectParameter pKID, string serialNo, string reason, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter serialNoParameter;
    
            if (serialNo != null)
            {
                serialNoParameter = new ObjectParameter("SerialNo", serialNo);
            }
            else
            {
                serialNoParameter = new ObjectParameter("SerialNo", typeof(string));
            }
    
            ObjectParameter reasonParameter;
    
            if (reason != null)
            {
                reasonParameter = new ObjectParameter("Reason", reason);
            }
            else
            {
                reasonParameter = new ObjectParameter("Reason", typeof(string));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTicketUnused", pKID, serialNoParameter, reasonParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<TicketUnused> SelectTicketUnused()
        {
            return base.ExecuteFunction<TicketUnused>("SelectTicketUnused");
        }
        public ObjectResult<Nullable<int>> UpdateTicketUnused(ObjectParameter pKID, string serialNo, string reason, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter serialNoParameter;
    
            if (serialNo != null)
            {
                serialNoParameter = new ObjectParameter("SerialNo", serialNo);
            }
            else
            {
                serialNoParameter = new ObjectParameter("SerialNo", typeof(string));
            }
    
            ObjectParameter reasonParameter;
    
            if (reason != null)
            {
                reasonParameter = new ObjectParameter("Reason", reason);
            }
            else
            {
                reasonParameter = new ObjectParameter("Reason", typeof(string));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateTicketUnused", pKID, serialNoParameter, reasonParameter, modifiedByParameter, modifiedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<short>> DeleteTicketDamages(string serialNo)
        {
    
            ObjectParameter serialNoParameter;
    
            if (serialNo != null)
            {
                serialNoParameter = new ObjectParameter("SerialNo", serialNo);
            }
            else
            {
                serialNoParameter = new ObjectParameter("SerialNo", typeof(string));
            }
            return base.ExecuteFunction<Nullable<short>>("DeleteTicketDamages", serialNoParameter);
        }
        public ObjectResult<Nullable<int>> InsertTicketActivationLog(Nullable<int> counterID, Nullable<int> zoneID, Nullable<int> ticketID, Nullable<System.Guid> transactionID, Nullable<System.DateTime> activatedDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter counterIDParameter;
    
            if (counterID.HasValue)
            {
                counterIDParameter = new ObjectParameter("CounterID", counterID);
            }
            else
            {
                counterIDParameter = new ObjectParameter("CounterID", typeof(int));
            }
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID.HasValue)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(int));
            }
    
            ObjectParameter ticketIDParameter;
    
            if (ticketID.HasValue)
            {
                ticketIDParameter = new ObjectParameter("TicketID", ticketID);
            }
            else
            {
                ticketIDParameter = new ObjectParameter("TicketID", typeof(int));
            }
    
            ObjectParameter transactionIDParameter;
    
            if (transactionID.HasValue)
            {
                transactionIDParameter = new ObjectParameter("TransactionID", transactionID);
            }
            else
            {
                transactionIDParameter = new ObjectParameter("TransactionID", typeof(System.Guid));
            }
    
            ObjectParameter activatedDateParameter;
    
            if (activatedDate.HasValue)
            {
                activatedDateParameter = new ObjectParameter("ActivatedDate", activatedDate);
            }
            else
            {
                activatedDateParameter = new ObjectParameter("ActivatedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTicketActivationLog", counterIDParameter, zoneIDParameter, ticketIDParameter, transactionIDParameter, activatedDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertTicketUsageLog(Nullable<int> counterID, Nullable<int> zoneID, Nullable<int> ticketID, Nullable<System.DateTime> dateUsed, Nullable<int> usageCountBefore, Nullable<System.Guid> transactionID, Nullable<int> usageCountAfter, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter counterIDParameter;
    
            if (counterID.HasValue)
            {
                counterIDParameter = new ObjectParameter("CounterID", counterID);
            }
            else
            {
                counterIDParameter = new ObjectParameter("CounterID", typeof(int));
            }
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID.HasValue)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(int));
            }
    
            ObjectParameter ticketIDParameter;
    
            if (ticketID.HasValue)
            {
                ticketIDParameter = new ObjectParameter("TicketID", ticketID);
            }
            else
            {
                ticketIDParameter = new ObjectParameter("TicketID", typeof(int));
            }
    
            ObjectParameter dateUsedParameter;
    
            if (dateUsed.HasValue)
            {
                dateUsedParameter = new ObjectParameter("DateUsed", dateUsed);
            }
            else
            {
                dateUsedParameter = new ObjectParameter("DateUsed", typeof(System.DateTime));
            }
    
            ObjectParameter usageCountBeforeParameter;
    
            if (usageCountBefore.HasValue)
            {
                usageCountBeforeParameter = new ObjectParameter("UsageCountBefore", usageCountBefore);
            }
            else
            {
                usageCountBeforeParameter = new ObjectParameter("UsageCountBefore", typeof(int));
            }
    
            ObjectParameter transactionIDParameter;
    
            if (transactionID.HasValue)
            {
                transactionIDParameter = new ObjectParameter("TransactionID", transactionID);
            }
            else
            {
                transactionIDParameter = new ObjectParameter("TransactionID", typeof(System.Guid));
            }
    
            ObjectParameter usageCountAfterParameter;
    
            if (usageCountAfter.HasValue)
            {
                usageCountAfterParameter = new ObjectParameter("UsageCountAfter", usageCountAfter);
            }
            else
            {
                usageCountAfterParameter = new ObjectParameter("UsageCountAfter", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTicketUsageLog", counterIDParameter, zoneIDParameter, ticketIDParameter, dateUsedParameter, usageCountBeforeParameter, transactionIDParameter, usageCountAfterParameter, errorCode, errorMsg);
        }
        public ObjectResult<TicketActivationLog> RetrieveTicketActivationLog(ObjectParameter errorCode, ObjectParameter errorMsg)
        {
            return base.ExecuteFunction<TicketActivationLog>("RetrieveTicketActivationLog", errorCode, errorMsg);
        }
        public ObjectResult<TicketUsageLog> RetrieveTicketUsageLog(ObjectParameter errorCode, ObjectParameter errorMsg)
        {
            return base.ExecuteFunction<TicketUsageLog>("RetrieveTicketUsageLog", errorCode, errorMsg);
        }
        public ObjectResult<Ticket> DownloadData(Nullable<int> counterID, Nullable<int> numOfRecords, Nullable<int> pageIndex, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter counterIDParameter;
    
            if (counterID.HasValue)
            {
                counterIDParameter = new ObjectParameter("CounterID", counterID);
            }
            else
            {
                counterIDParameter = new ObjectParameter("CounterID", typeof(int));
            }
    
            ObjectParameter numOfRecordsParameter;
    
            if (numOfRecords.HasValue)
            {
                numOfRecordsParameter = new ObjectParameter("NumOfRecords", numOfRecords);
            }
            else
            {
                numOfRecordsParameter = new ObjectParameter("NumOfRecords", typeof(int));
            }
    
            ObjectParameter pageIndexParameter;
    
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(int));
            }
            return base.ExecuteFunction<Ticket>("DownloadData", counterIDParameter, numOfRecordsParameter, pageIndexParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> InsertCounter(ObjectParameter pKID, Nullable<int> counterID, Nullable<int> zoneID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter counterIDParameter;
    
            if (counterID.HasValue)
            {
                counterIDParameter = new ObjectParameter("CounterID", counterID);
            }
            else
            {
                counterIDParameter = new ObjectParameter("CounterID", typeof(int));
            }
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID.HasValue)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(int));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertCounter", pKID, counterIDParameter, zoneIDParameter, createdByParameter, createdDateParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> DeleteCounter(Nullable<int> counterID, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter counterIDParameter;
    
            if (counterID.HasValue)
            {
                counterIDParameter = new ObjectParameter("CounterID", counterID);
            }
            else
            {
                counterIDParameter = new ObjectParameter("CounterID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("DeleteCounter", counterIDParameter, errorCode, errorMsg);
        }
        public ObjectResult<Counter> SelectCounter()
        {
            return base.ExecuteFunction<Counter>("SelectCounter");
        }
        public ObjectResult<Nullable<int>> UpdateCounter(Nullable<int> pKID, Nullable<int> counterID, Nullable<int> zoneID, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter pKIDParameter;
    
            if (pKID.HasValue)
            {
                pKIDParameter = new ObjectParameter("PKID", pKID);
            }
            else
            {
                pKIDParameter = new ObjectParameter("PKID", typeof(int));
            }
    
            ObjectParameter counterIDParameter;
    
            if (counterID.HasValue)
            {
                counterIDParameter = new ObjectParameter("CounterID", counterID);
            }
            else
            {
                counterIDParameter = new ObjectParameter("CounterID", typeof(int));
            }
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID.HasValue)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateCounter", pKIDParameter, counterIDParameter, zoneIDParameter, errorCode, errorMsg);
        }
        public ObjectResult<Ticket> ExportFromServer(Nullable<int> counterID, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter counterIDParameter;
    
            if (counterID.HasValue)
            {
                counterIDParameter = new ObjectParameter("CounterID", counterID);
            }
            else
            {
                counterIDParameter = new ObjectParameter("CounterID", typeof(int));
            }
            return base.ExecuteFunction<Ticket>("ExportFromServer", counterIDParameter, errorCode, errorMsg);
        }
        public ObjectResult<Nullable<int>> SelectNewCounterID()
        {
            return base.ExecuteFunction<Nullable<int>>("SelectNewCounterID");
        }
        public ObjectResult<CounterAndZone> SelectCounterDetail()
        {
            return base.ExecuteFunction<CounterAndZone>("SelectCounterDetail");
        }
        public ObjectResult<TicketDetail> SelectTicketCollectionsUsingFilters(Nullable<int> ticketSerialFrom, Nullable<int> ticketSerialTo, string zoneGroup, string ticketStatus, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo)
        {
    
            ObjectParameter ticketSerialFromParameter;
    
            if (ticketSerialFrom.HasValue)
            {
                ticketSerialFromParameter = new ObjectParameter("TicketSerialFrom", ticketSerialFrom);
            }
            else
            {
                ticketSerialFromParameter = new ObjectParameter("TicketSerialFrom", typeof(int));
            }
    
            ObjectParameter ticketSerialToParameter;
    
            if (ticketSerialTo.HasValue)
            {
                ticketSerialToParameter = new ObjectParameter("TicketSerialTo", ticketSerialTo);
            }
            else
            {
                ticketSerialToParameter = new ObjectParameter("TicketSerialTo", typeof(int));
            }
    
            ObjectParameter zoneGroupParameter;
    
            if (zoneGroup != null)
            {
                zoneGroupParameter = new ObjectParameter("ZoneGroup", zoneGroup);
            }
            else
            {
                zoneGroupParameter = new ObjectParameter("ZoneGroup", typeof(string));
            }
    
            ObjectParameter ticketStatusParameter;
    
            if (ticketStatus != null)
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", ticketStatus);
            }
            else
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", typeof(string));
            }
    
            ObjectParameter createdDateFromParameter;
    
            if (createdDateFrom.HasValue)
            {
                createdDateFromParameter = new ObjectParameter("CreatedDateFrom", createdDateFrom);
            }
            else
            {
                createdDateFromParameter = new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter createdDateToParameter;
    
            if (createdDateTo.HasValue)
            {
                createdDateToParameter = new ObjectParameter("CreatedDateTo", createdDateTo);
            }
            else
            {
                createdDateToParameter = new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
            }
            return base.ExecuteFunction<TicketDetail>("SelectTicketCollectionsUsingFilters", ticketSerialFromParameter, ticketSerialToParameter, zoneGroupParameter, ticketStatusParameter, createdDateFromParameter, createdDateToParameter);
        }
        public ObjectResult<UserAccessLog> SelectUserCollectionUsingFilters(string userStatus, string displayName, Nullable<System.DateTime> loginDateFrom, Nullable<System.DateTime> loginDateTo, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo)
        {
    
            ObjectParameter userStatusParameter;
    
            if (userStatus != null)
            {
                userStatusParameter = new ObjectParameter("UserStatus", userStatus);
            }
            else
            {
                userStatusParameter = new ObjectParameter("UserStatus", typeof(string));
            }
    
            ObjectParameter displayNameParameter;
    
            if (displayName != null)
            {
                displayNameParameter = new ObjectParameter("DisplayName", displayName);
            }
            else
            {
                displayNameParameter = new ObjectParameter("DisplayName", typeof(string));
            }
    
            ObjectParameter loginDateFromParameter;
    
            if (loginDateFrom.HasValue)
            {
                loginDateFromParameter = new ObjectParameter("LoginDateFrom", loginDateFrom);
            }
            else
            {
                loginDateFromParameter = new ObjectParameter("LoginDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter loginDateToParameter;
    
            if (loginDateTo.HasValue)
            {
                loginDateToParameter = new ObjectParameter("LoginDateTo", loginDateTo);
            }
            else
            {
                loginDateToParameter = new ObjectParameter("LoginDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter createdDateFromParameter;
    
            if (createdDateFrom.HasValue)
            {
                createdDateFromParameter = new ObjectParameter("CreatedDateFrom", createdDateFrom);
            }
            else
            {
                createdDateFromParameter = new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter createdDateToParameter;
    
            if (createdDateTo.HasValue)
            {
                createdDateToParameter = new ObjectParameter("CreatedDateTo", createdDateTo);
            }
            else
            {
                createdDateToParameter = new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
            }
            return base.ExecuteFunction<UserAccessLog>("SelectUserCollectionUsingFilters", userStatusParameter, displayNameParameter, loginDateFromParameter, loginDateToParameter, createdDateFromParameter, createdDateToParameter);
        }
        public ObjectResult<DistinctZoneGroupName> SelectDistinctZoneGroup()
        {
            return base.ExecuteFunction<DistinctZoneGroupName>("SelectDistinctZoneGroup");
        }
        public ObjectResult<Nullable<int>> InsertPrintingCode(string approvedCode, ObjectParameter errorCode, ObjectParameter errorMsg)
        {
    
            ObjectParameter approvedCodeParameter;
    
            if (approvedCode != null)
            {
                approvedCodeParameter = new ObjectParameter("ApprovedCode", approvedCode);
            }
            else
            {
                approvedCodeParameter = new ObjectParameter("ApprovedCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertPrintingCode", approvedCodeParameter, errorCode, errorMsg);
        }
        public ObjectResult<PrintingApproved> SelectPrintingApproved()
        {
            return base.ExecuteFunction<PrintingApproved>("SelectPrintingApproved");
        }
        public ObjectResult<Nullable<int>> DeletePrintingCode()
        {
            return base.ExecuteFunction<Nullable<int>>("DeletePrintingCode");
        }

        #endregion
    }
}
