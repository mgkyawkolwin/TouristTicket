//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

using ACS.TouristTicket.Model;
namespace ACS.TouristTicket.DataAccess
{
    public partial class TouristTicketContainer : ObjectContext
    {
        public const string ConnectionString = "name=TouristTicketContainer";
        public const string ContainerName = "TouristTicketContainer";
    
        #region Constructors
    
        public TouristTicketContainer()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public TouristTicketContainer(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public TouristTicketContainer(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<SampleObject> SampleObjects
        {
            get { return _sampleObjects  ?? (_sampleObjects = CreateObjectSet<SampleObject>("SampleObjects")); }
        }
        private ObjectSet<SampleObject> _sampleObjects;
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
        public ObjectSet<Role> Roles
        {
            get { return _roles  ?? (_roles = CreateObjectSet<Role>("Roles")); }
        }
        private ObjectSet<Role> _roles;
    
        public ObjectSet<UserInRole> UserInRoles
        {
            get { return _userInRoles  ?? (_userInRoles = CreateObjectSet<UserInRole>("UserInRoles")); }
        }
        private ObjectSet<UserInRole> _userInRoles;
    
        public ObjectSet<UserAccessLog> UserAccessLogs
        {
            get { return _userAccessLogs  ?? (_userAccessLogs = CreateObjectSet<UserAccessLog>("UserAccessLogs")); }
        }
        private ObjectSet<UserAccessLog> _userAccessLogs;
    
        public ObjectSet<ExceptionLog> ExceptionLogs
        {
            get { return _exceptionLogs  ?? (_exceptionLogs = CreateObjectSet<ExceptionLog>("ExceptionLogs")); }
        }
        private ObjectSet<ExceptionLog> _exceptionLogs;
    
        public ObjectSet<TransactionLog> TransactionLogs
        {
            get { return _transactionLogs  ?? (_transactionLogs = CreateObjectSet<TransactionLog>("TransactionLogs")); }
        }
        private ObjectSet<TransactionLog> _transactionLogs;
    
        public ObjectSet<TicketInZone> TicketInZones
        {
            get { return _ticketInZones  ?? (_ticketInZones = CreateObjectSet<TicketInZone>("TicketInZones")); }
        }
        private ObjectSet<TicketInZone> _ticketInZones;
    
        public ObjectSet<TicketUsage> TicketUsages
        {
            get { return _ticketUsages  ?? (_ticketUsages = CreateObjectSet<TicketUsage>("TicketUsages")); }
        }
        private ObjectSet<TicketUsage> _ticketUsages;
    
        public ObjectSet<Ticket> Tickets
        {
            get { return _tickets  ?? (_tickets = CreateObjectSet<Ticket>("Tickets")); }
        }
        private ObjectSet<Ticket> _tickets;
    
        public ObjectSet<Zone> Zones
        {
            get { return _zones  ?? (_zones = CreateObjectSet<Zone>("Zones")); }
        }
        private ObjectSet<Zone> _zones;
    
        public ObjectSet<ZoneGroup> ZoneGroups
        {
            get { return _zoneGroups  ?? (_zoneGroups = CreateObjectSet<ZoneGroup>("ZoneGroups")); }
        }
        private ObjectSet<ZoneGroup> _zoneGroups;
    
        public ObjectSet<ZoneGroupSetting> ZoneGroupSettings
        {
            get { return _zoneGroupSettings  ?? (_zoneGroupSettings = CreateObjectSet<ZoneGroupSetting>("ZoneGroupSettings")); }
        }
        private ObjectSet<ZoneGroupSetting> _zoneGroupSettings;
    
        public ObjectSet<ZoneSetting> ZoneSettings
        {
            get { return _zoneSettings  ?? (_zoneSettings = CreateObjectSet<ZoneSetting>("ZoneSettings")); }
        }
        private ObjectSet<ZoneSetting> _zoneSettings;

        #endregion
        #region Function Imports
        public ObjectResult<Nullable<int>> InsertSample(ObjectParameter pKID, string sampleData, ObjectParameter errorCode)
        {
    
            ObjectParameter sampleDataParameter;
    
            if (sampleData != null)
            {
                sampleDataParameter = new ObjectParameter("SampleData", sampleData);
            }
            else
            {
                sampleDataParameter = new ObjectParameter("SampleData", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertSample", pKID, sampleDataParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> UpdateSample(Nullable<int> pKID, string sampleData, ObjectParameter errorCode)
        {
    
            ObjectParameter pKIDParameter;
    
            if (pKID.HasValue)
            {
                pKIDParameter = new ObjectParameter("PKID", pKID);
            }
            else
            {
                pKIDParameter = new ObjectParameter("PKID", typeof(int));
            }
    
            ObjectParameter sampleDataParameter;
    
            if (sampleData != null)
            {
                sampleDataParameter = new ObjectParameter("SampleData", sampleData);
            }
            else
            {
                sampleDataParameter = new ObjectParameter("SampleData", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateSample", pKIDParameter, sampleDataParameter, errorCode);
        }
        public ObjectResult<SampleObject> SelectSample()
        {
            return base.ExecuteFunction<SampleObject>("SelectSample");
        }
        public ObjectResult<User> SelectUser()
        {
            return base.ExecuteFunction<User>("SelectUser");
        }
        public ObjectResult<User> UserLogIn(string userID, string password)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
            return base.ExecuteFunction<User>("UserLogIn", userIDParameter, passwordParameter);
        }
        public ObjectResult<Role> SelectRole()
        {
            return base.ExecuteFunction<Role>("SelectRole");
        }
        public ObjectResult<Nullable<int>> InsertUserAccessLog(ObjectParameter pKID, string userID, Nullable<System.DateTime> accessDate, string action, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter accessDateParameter;
    
            if (accessDate.HasValue)
            {
                accessDateParameter = new ObjectParameter("AccessDate", accessDate);
            }
            else
            {
                accessDateParameter = new ObjectParameter("AccessDate", typeof(System.DateTime));
            }
    
            ObjectParameter actionParameter;
    
            if (action != null)
            {
                actionParameter = new ObjectParameter("Action", action);
            }
            else
            {
                actionParameter = new ObjectParameter("Action", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertUserAccessLog", pKID, userIDParameter, accessDateParameter, actionParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode);
        }
        public ObjectResult<UserAccessLog> SelectUserAccessLog()
        {
            return base.ExecuteFunction<UserAccessLog>("SelectUserAccessLog");
        }
        public ObjectResult<UserAccessLog> SelectUserAccessLogByUserID(string userID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
            return base.ExecuteFunction<UserAccessLog>("SelectUserAccessLogByUserID", userIDParameter);
        }
        public ObjectResult<Nullable<int>> InsertUserInRole(ObjectParameter pKID, string userID, string roleID, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter roleIDParameter;
    
            if (roleID != null)
            {
                roleIDParameter = new ObjectParameter("RoleID", roleID);
            }
            else
            {
                roleIDParameter = new ObjectParameter("RoleID", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertUserInRole", pKID, userIDParameter, roleIDParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> UpdateUser(ObjectParameter pKID, string userID, string password, string displayName, string status, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
    
            ObjectParameter displayNameParameter;
    
            if (displayName != null)
            {
                displayNameParameter = new ObjectParameter("DisplayName", displayName);
            }
            else
            {
                displayNameParameter = new ObjectParameter("DisplayName", typeof(string));
            }
    
            ObjectParameter statusParameter;
    
            if (status != null)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(string));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateUser", pKID, userIDParameter, passwordParameter, displayNameParameter, statusParameter, modifiedDateParameter, modifiedByParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> UpdateUserInRole(ObjectParameter pKID, string userID, string roleID, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter roleIDParameter;
    
            if (roleID != null)
            {
                roleIDParameter = new ObjectParameter("RoleID", roleID);
            }
            else
            {
                roleIDParameter = new ObjectParameter("RoleID", typeof(string));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateUserInRole", pKID, userIDParameter, roleIDParameter, modifiedDateParameter, modifiedByParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> InsertNewUser(ObjectParameter pKID, string userID, string password, string displayName, string status, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID != null)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
    
            ObjectParameter displayNameParameter;
    
            if (displayName != null)
            {
                displayNameParameter = new ObjectParameter("DisplayName", displayName);
            }
            else
            {
                displayNameParameter = new ObjectParameter("DisplayName", typeof(string));
            }
    
            ObjectParameter statusParameter;
    
            if (status != null)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertNewUser", pKID, userIDParameter, passwordParameter, displayNameParameter, statusParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> InsertExceptionLog(ObjectParameter pKID, string errorMessage, string stackTrace, Nullable<System.DateTime> createdDate, ObjectParameter errorCode)
        {
    
            ObjectParameter errorMessageParameter;
    
            if (errorMessage != null)
            {
                errorMessageParameter = new ObjectParameter("ErrorMessage", errorMessage);
            }
            else
            {
                errorMessageParameter = new ObjectParameter("ErrorMessage", typeof(string));
            }
    
            ObjectParameter stackTraceParameter;
    
            if (stackTrace != null)
            {
                stackTraceParameter = new ObjectParameter("StackTrace", stackTrace);
            }
            else
            {
                stackTraceParameter = new ObjectParameter("StackTrace", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertExceptionLog", pKID, errorMessageParameter, stackTraceParameter, createdDateParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> InsertTransactionLog(ObjectParameter pKID, string transactionType, Nullable<System.DateTime> transactionDate, string data, ObjectParameter errorCode)
        {
    
            ObjectParameter transactionTypeParameter;
    
            if (transactionType != null)
            {
                transactionTypeParameter = new ObjectParameter("TransactionType", transactionType);
            }
            else
            {
                transactionTypeParameter = new ObjectParameter("TransactionType", typeof(string));
            }
    
            ObjectParameter transactionDateParameter;
    
            if (transactionDate.HasValue)
            {
                transactionDateParameter = new ObjectParameter("TransactionDate", transactionDate);
            }
            else
            {
                transactionDateParameter = new ObjectParameter("TransactionDate", typeof(System.DateTime));
            }
    
            ObjectParameter dataParameter;
    
            if (data != null)
            {
                dataParameter = new ObjectParameter("Data", data);
            }
            else
            {
                dataParameter = new ObjectParameter("Data", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTransactionLog", pKID, transactionTypeParameter, transactionDateParameter, dataParameter, errorCode);
        }
        public ObjectResult<Ticket> SelectTicket()
        {
            return base.ExecuteFunction<Ticket>("SelectTicket");
        }
        public ObjectResult<Nullable<int>> InsertNewTicket(ObjectParameter pKID, Nullable<decimal> price, string ticketStatus, Nullable<int> allowedUsage, Nullable<int> alreadyUsed, Nullable<int> allowedDays, Nullable<System.DateTime> expiryDate, string ticketData, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode)
        {
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("Price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("Price", typeof(decimal));
            }
    
            ObjectParameter ticketStatusParameter;
    
            if (ticketStatus != null)
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", ticketStatus);
            }
            else
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", typeof(string));
            }
    
            ObjectParameter allowedUsageParameter;
    
            if (allowedUsage.HasValue)
            {
                allowedUsageParameter = new ObjectParameter("AllowedUsage", allowedUsage);
            }
            else
            {
                allowedUsageParameter = new ObjectParameter("AllowedUsage", typeof(int));
            }
    
            ObjectParameter alreadyUsedParameter;
    
            if (alreadyUsed.HasValue)
            {
                alreadyUsedParameter = new ObjectParameter("AlreadyUsed", alreadyUsed);
            }
            else
            {
                alreadyUsedParameter = new ObjectParameter("AlreadyUsed", typeof(int));
            }
    
            ObjectParameter allowedDaysParameter;
    
            if (allowedDays.HasValue)
            {
                allowedDaysParameter = new ObjectParameter("AllowedDays", allowedDays);
            }
            else
            {
                allowedDaysParameter = new ObjectParameter("AllowedDays", typeof(int));
            }
    
            ObjectParameter expiryDateParameter;
    
            if (expiryDate.HasValue)
            {
                expiryDateParameter = new ObjectParameter("ExpiryDate", expiryDate);
            }
            else
            {
                expiryDateParameter = new ObjectParameter("ExpiryDate", typeof(System.DateTime));
            }
    
            ObjectParameter ticketDataParameter;
    
            if (ticketData != null)
            {
                ticketDataParameter = new ObjectParameter("TicketData", ticketData);
            }
            else
            {
                ticketDataParameter = new ObjectParameter("TicketData", typeof(string));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertNewTicket", pKID, priceParameter, ticketStatusParameter, allowedUsageParameter, alreadyUsedParameter, allowedDaysParameter, expiryDateParameter, ticketDataParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> InsertTicketInZone(ObjectParameter pKID, Nullable<int> ticketID, Nullable<int> zoneID, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, ObjectParameter errorCode)
        {
    
            ObjectParameter ticketIDParameter;
    
            if (ticketID.HasValue)
            {
                ticketIDParameter = new ObjectParameter("TicketID", ticketID);
            }
            else
            {
                ticketIDParameter = new ObjectParameter("TicketID", typeof(int));
            }
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID.HasValue)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTicketInZone", pKID, ticketIDParameter, zoneIDParameter, createdDateParameter, createdByParameter, modifiedDateParameter, modifiedByParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> InsertTicketUsage(ObjectParameter pKID, Nullable<int> ticketID, Nullable<int> zoneID, Nullable<System.DateTime> dateUsed, ObjectParameter errorCode)
        {
    
            ObjectParameter ticketIDParameter;
    
            if (ticketID.HasValue)
            {
                ticketIDParameter = new ObjectParameter("TicketID", ticketID);
            }
            else
            {
                ticketIDParameter = new ObjectParameter("TicketID", typeof(int));
            }
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID.HasValue)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(int));
            }
    
            ObjectParameter dateUsedParameter;
    
            if (dateUsed.HasValue)
            {
                dateUsedParameter = new ObjectParameter("DateUsed", dateUsed);
            }
            else
            {
                dateUsedParameter = new ObjectParameter("DateUsed", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertTicketUsage", pKID, ticketIDParameter, zoneIDParameter, dateUsedParameter, errorCode);
        }
        public ObjectResult<Nullable<int>> InsertZone(ObjectParameter pKID, string zoneID, string zoneName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, ObjectParameter errorCode)
        {
    
            ObjectParameter zoneIDParameter;
    
            if (zoneID != null)
            {
                zoneIDParameter = new ObjectParameter("ZoneID", zoneID);
            }
            else
            {
                zoneIDParameter = new ObjectParameter("ZoneID", typeof(string));
            }
    
            ObjectParameter zoneNameParameter;
    
            if (zoneName != null)
            {
                zoneNameParameter = new ObjectParameter("ZoneName", zoneName);
            }
            else
            {
                zoneNameParameter = new ObjectParameter("ZoneName", typeof(string));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertZone", pKID, zoneIDParameter, zoneNameParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, errorCode);
        }
        public ObjectResult<TicketInZone> SelectTicketInZone()
        {
            return base.ExecuteFunction<TicketInZone>("SelectTicketInZone");
        }
        public ObjectResult<TicketUsage> SelectTicketUsage()
        {
            return base.ExecuteFunction<TicketUsage>("SelectTicketUsage");
        }
        public ObjectResult<Nullable<int>> UpdateTicket(ObjectParameter pKID, Nullable<decimal> price, string ticketStatus, Nullable<int> allowedUsage, Nullable<int> alreadyUsed, Nullable<int> allowedDays, Nullable<System.DateTime> expiryDate, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, ObjectParameter errorCode)
        {
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("Price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("Price", typeof(decimal));
            }
    
            ObjectParameter ticketStatusParameter;
    
            if (ticketStatus != null)
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", ticketStatus);
            }
            else
            {
                ticketStatusParameter = new ObjectParameter("TicketStatus", typeof(string));
            }
    
            ObjectParameter allowedUsageParameter;
    
            if (allowedUsage.HasValue)
            {
                allowedUsageParameter = new ObjectParameter("AllowedUsage", allowedUsage);
            }
            else
            {
                allowedUsageParameter = new ObjectParameter("AllowedUsage", typeof(int));
            }
    
            ObjectParameter alreadyUsedParameter;
    
            if (alreadyUsed.HasValue)
            {
                alreadyUsedParameter = new ObjectParameter("AlreadyUsed", alreadyUsed);
            }
            else
            {
                alreadyUsedParameter = new ObjectParameter("AlreadyUsed", typeof(int));
            }
    
            ObjectParameter allowedDaysParameter;
    
            if (allowedDays.HasValue)
            {
                allowedDaysParameter = new ObjectParameter("AllowedDays", allowedDays);
            }
            else
            {
                allowedDaysParameter = new ObjectParameter("AllowedDays", typeof(int));
            }
    
            ObjectParameter expiryDateParameter;
    
            if (expiryDate.HasValue)
            {
                expiryDateParameter = new ObjectParameter("ExpiryDate", expiryDate);
            }
            else
            {
                expiryDateParameter = new ObjectParameter("ExpiryDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy.HasValue)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(int));
            }
    
            ObjectParameter createdDateParameter;
    
            if (createdDate.HasValue)
            {
                createdDateParameter = new ObjectParameter("CreatedDate", createdDate);
            }
            else
            {
                createdDateParameter = new ObjectParameter("CreatedDate", typeof(System.DateTime));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateTicket", pKID, priceParameter, ticketStatusParameter, allowedUsageParameter, alreadyUsedParameter, allowedDaysParameter, expiryDateParameter, modifiedDateParameter, modifiedByParameter, createdDateParameter, createdByParameter, errorCode);
        }
        public ObjectResult<Zone> SelectZone()
        {
            return base.ExecuteFunction<Zone>("SelectZone");
        }

        #endregion
    }
}
